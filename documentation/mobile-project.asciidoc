---
title: Creating a New TouchKit Project
order: 5
layout: page
---

[[mobile.project]]
= Creating a New TouchKit Project

The easiest ways to create a new TouchKit application project are to either use
the Maven archetype or create the project as a regular Vaadin project with the
Vaadin Plugin for Eclipse and then modify it for TouchKit.

[[mobile.project.maven]]
== Using the Maven Archetype

You can create a new TouchKit application project using the Maven
[parameter]#vaadin-archetype-touchkit# archetype. Creating Vaadin projects with
Maven is described in more detail in
<<dummy/../../framework/getting-started/getting-started-maven#getting-started.maven,"Using
Vaadin with Maven">>.

For example, to create a project from the command-line, you could do:

[subs="normal"]
----
[prompt]#$# [command]#mvn# archetype:generate \
  -DarchetypeGroupId=com.vaadin \
  -DarchetypeArtifactId=vaadin-archetype-touchkit \
  -DarchetypeVersion=[replaceable]##4.0.0## \
  -DgroupId=[replaceable]##example.com## -DartifactId=[replaceable]##myproject## \
  -Dversion=[replaceable]##0.1.0## \
  -DApplicationName=[replaceable]##My## -Dpackaging=war
----
The [parameter]#ApplicationName# parameter for the archetype is used as a prefix
for the various stub class names. For example, the above "My" name results in
classes such as [classname]#MyTouchKitUI#.

The generated project has the following source files:

[filename]#MyTouchKitUI.java#:: The mobile UI for the TouchKit application. See
<<dummy/../../touchkit/mobile-elements#mobile.elements.ui,"The UI">> for the
basics of a TouchKit UI. The example UI uses [classname]#TabBarView# as the
content. The first tab features a [classname]#MenuView# (see below), a
navigation view stub defined in the project.

[filename]#MyFallbackUI.java#:: A fallback UI for browsers unsupported by TouchKit, such as regular desktop
browsers. See
<<dummy/../../touchkit/mobile-features#mobile.features.fallback,"Providing a
Fallback UI">> for more information about fallback UIs.

[filename]#MyServlet.java#:: The servlet class for the UI, defined using the [literal]#++@WebServlet++#
annotation in Servlet API 3.0. The generated servlet customizes TouchKit to
define the [classname]#MyUIProvider#, which sets the fallback UI. See
<<dummy/../../touchkit/mobile-elements#mobile.elements.servlet,"The Servlet
Class">> for more details about defining a custom servlet to customize TouchKit.

[filename]#MyUIProvider.java#:: Creates either the [classname]#MyTouchKitUI# for supported mobile browsers or
[classname]#MyFallBackUI# for unsupported browsers. See
<<dummy/../../touchkit/mobile-features#mobile.features.fallback,"Providing a
Fallback UI">> for more information about fallback UIs.

[filename]#MenuView.java#:: Presents a stub for a menu view. The menu is made of
[classname]##NavigationButton##s laid out in a
[classname]#VerticalComponentGroup#. Clicking a button navigates to another
view; in the stub to a [classname]#FormView# (see below).

[filename]#FormView.java#:: Presents a stub for a data input form.

[filename]#gwt/AppWidgetSet.gwt.xml#:: Widget set descriptor for the project. When compiled, it is automatically
updated to include possible other add-on widget sets in the project.

[filename]#gwt/client/MyOfflineDataService.java#:: A data service stub for storing data in the offline mode. See
<<dummy/../../touchkit/mobile-offline#mobile.offline,"Offline Mode">>.

[filename]#gwt/client/MyPersistToServerRpc.java#:: Client-to-Server RPC stub to persist offline data to the server-side.



If you import the project to Eclipse or other IDE, you at least need to compile
the widget set to be able to deploy the project. You can to do that with Maven
integration in the IDE, or from command-line with:

[subs="normal"]
----
[prompt]#$# [command]#mvn# vaadin:compile
----
See
<<dummy/../../framework/getting-started/getting-started-maven#getting-started.maven,"Using
Vaadin with Maven">>. At least in Eclipse, you should now be able to import and
deploy the project to a development server. You can also compile the project and
launch it in a Jetty web server (port 8080) from command-line as follows:

[subs="normal"]
----
[prompt]#$# [command]#mvn# package
[prompt]#$# [command]#mvn# jetty:run
----
Note that a project generated by the archetype defines the servlet with the
[literal]#++@WebServlet++# annotation defined in Servlet API 3.0. The
application server must support Servlet 3.0. For example, if you use Tomcat, you
need at least Tomcat 7.


[[mobile.project.eclipse]]
== Starting from a New Eclipse Project

You can create a new TouchKit project from a regular Vaadin project created with
the Vaadin Plugin for Eclipse (see
<<dummy/../../framework/getting-started/getting-started-first-project#getting-started.first-project,"Creating
and Running a Project with Eclipse">>).

After creating the project, you need to do the following tasks:

. Install the TouchKit library in the project by including it in the
[filename]#ivy.xml#
ifdef::web[]
, as described in
<<dummy/../../touchkit/mobile-installation#mobile.elements.ivy,"Installing as Ivy
Dependency">>,
endif::web[]
 and compile the widget set.

. Extend [classname]#TouchkitServlet# instead of [classname]#VaadinServlet# in the
servlet class, as described in
<<dummy/../../touchkit/mobile-elements#mobile.elements.servlet,"The Servlet
Class">>. It is recommended that you extract the static inner class created by
the wizard to a regular class, as you most probably need to do additional
configuration in it.


+
[subs="normal"]
----
@WebServlet(value = "/*",
            asyncSupported = true)
@VaadinServletConfiguration(
        productionMode = false,
        ui = MyMobileUI.class)
public class MyProjectServlet extends **TouchKitServlet** {
}
----
. If you intend to define a fallback UI later, as described in
<<dummy/../../touchkit/mobile-features#mobile.features.fallback,"Providing a
Fallback UI">>, you may want to copy the original UI class stub to use it as a
fallback UI class.

. To get started quickly, disable the use of custom theme by using
[literal]#++@Theme("touchkit")++# in the UI class. To create a custom mobile
theme later, see
<<dummy/../../touchkit/mobile-elements#mobile.elements.theme,"Mobile Theme">>.


+
[subs="normal"]
----
@Theme("**touchkit**")
public class MyMobileUI extends UI {
----
. Build the mobile UI preferring TouchKit components instead of the core Vaadin
components, as described in
<<dummy/../../touchkit/mobile-elements#mobile.elements.ui,"The UI">>.


We cover these and various other tasks in more detail in
<<dummy/../../touchkit/mobile-elements#mobile.elements,"Elements of a TouchKit
Application">>.




